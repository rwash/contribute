require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe AmazonPaymentAccountsController do

  # This should return the minimal set of attributes required to create a valid
  # AmazonPaymentAccount. As you add validations to AmazonPaymentAccount, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    attributes_for :amazon_payment_account
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AmazonPaymentAccountsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it 'should not respond' do
      expect { get :index }.to raise_error ActionController::RoutingError
    end
  end

  describe "GET show" do
    it 'should not respond' do
      amazon_payment_account = create :amazon_payment_account
      expect {
        get :show, {:id => amazon_payment_account.to_param}, valid_session
      }.to raise_error ActionController::RoutingError
    end
  end

  describe "GET new" do
    before { get :new, {}, valid_session }
    it { should respond_with :redirect }
  end

  describe "GET edit" do
    it "redirects to Amazon's CBUI interface" do
      amazon_payment_account = create :amazon_payment_account
      get :edit, {:id => amazon_payment_account.to_param}, valid_session
      subject.should respond_with :redirect
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new AmazonPaymentAccount" do
        expect {
          post :create, {:amazon_payment_account => creation_attributes}, valid_session
        }.to change(AmazonPaymentAccount, :count).by(1)
      end

      it "redirects to the associated project" do
        post :create, {:amazon_payment_account => creation_attributes}, valid_session
        response.should redirect_to(AmazonPaymentAccount.last.project)
      end

      private
      def creation_attributes
        attributes_for(:amazon_payment_account, project_id: project.id)
      end

      def project
        @_project ||= create :project
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved amazon_payment_account as @amazon_payment_account" do
        # Trigger the behavior that occurs when invalid params are submitted
        AmazonPaymentAccount.any_instance.stub(:save).and_return(false)
        post :create, {:amazon_payment_account => {  }}, valid_session
        assigns(:amazon_payment_account).should be_a_new(AmazonPaymentAccount)
      end

      it "redirects to the project new page" do
        # Trigger the behavior that occurs when invalid params are submitted
        AmazonPaymentAccount.any_instance.stub(:save).and_return(false)
        post :create, {:amazon_payment_account => {  }}, valid_session
        response.should redirect_to AmazonPaymentAccount.last.project
      end

      it "sets the flash to an error message"
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested amazon_payment_account" do
        amazon_payment_account = create :amazon_payment_account
        # Assuming there are no other amazon_payment_accounts in the database, this
        # specifies that the AmazonPaymentAccount created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        AmazonPaymentAccount.any_instance.should_receive(:update_attributes).with({ "these" => "params" })
        put :update, {:id => amazon_payment_account.to_param, :amazon_payment_account => { "these" => "params" }}, valid_session
      end

      it "assigns the requested amazon_payment_account as @amazon_payment_account" do
        amazon_payment_account = create :amazon_payment_account
        put :update, {:id => amazon_payment_account.to_param, :amazon_payment_account => valid_attributes}, valid_session
        assigns(:amazon_payment_account).should eq(amazon_payment_account)
      end

      it "redirects to the amazon_payment_account" do
        amazon_payment_account = create :amazon_payment_account
        put :update, {:id => amazon_payment_account.to_param, :amazon_payment_account => valid_attributes}, valid_session
        response.should redirect_to(amazon_payment_account)
      end
    end

    describe "with invalid params" do
      it "assigns the amazon_payment_account as @amazon_payment_account" do
        amazon_payment_account = create :amazon_payment_account
        # Trigger the behavior that occurs when invalid params are submitted
        AmazonPaymentAccount.any_instance.stub(:save).and_return(false)
        put :update, {:id => amazon_payment_account.to_param, :amazon_payment_account => {  }}, valid_session
        assigns(:amazon_payment_account).should eq(amazon_payment_account)
      end

      it "re-renders the 'edit' template" do
        amazon_payment_account = create :amazon_payment_account
        # Trigger the behavior that occurs when invalid params are submitted
        AmazonPaymentAccount.any_instance.stub(:save).and_return(false)
        put :update, {:id => amazon_payment_account.to_param, :amazon_payment_account => {  }}, valid_session
        response.should render_template("edit")
      end
    end
  end

  # TODO What do we do here?
  describe "DELETE destroy" do
    it "destroys the requested amazon_payment_account" do
      amazon_payment_account = create :amazon_payment_account
      expect {
        delete :destroy, {:id => amazon_payment_account.to_param}, valid_session
      }.to change(AmazonPaymentAccount, :count).by(-1)
    end

    it "redirects to the amazon_payment_accounts list" do
      amazon_payment_account = create :amazon_payment_account
      delete :destroy, {:id => amazon_payment_account.to_param}, valid_session
      response.should redirect_to(amazon_payment_accounts_url)
    end
  end

end
